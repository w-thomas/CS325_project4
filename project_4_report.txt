run verifiers

example instances solutions and time taken
Example 1: solution: Time taken: 0. Solution:
18
16
15
13
14
74
8
7
6
4
3
2
75
0
1
23
22
21
25
24
46
45
44
48
47
69
68
70
67
50
49
52
53
54
42
43
28
27
26
29
30
31
19
20
5
10
9
12
11
17
35
32
33
55
56
51
66
65
71
72
73
64
63
57
62
61
58
59
60
41
40
34
39
38
36
37
Example 2: Time taken: 12
Solution:
0
2
3
279
278
4
277
276
275
274
273
272
271
16
17
18
19
20
21
128
127
126
125
30
31
32
29
28
27
26
22
25
23
24
14
13
12
11
10
8
7
9
6
5
1
242
243
241
240
239
238
231
232
233
234
235
236
237
246
245
244
247
250
251
230
229
228
227
226
225
224
223
222
219
218
215
214
211
210
207
208
209
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
138
137
136
135
134
270
269
268
267
140
139
148
141
142
143
144
145
146
147
149
150
178
151
152
156
153
155
154
129
130
131
132
133
15
248
249
206
205
204
203
202
200
199
198
197
194
195
196
201
193
192
191
190
189
188
187
185
184
183
182
181
176
177
180
179
160
159
158
157
119
120
121
122
123
124
33
34
35
36
37
38
39
40
41
42
43
60
61
118
62
63
64
65
66
67
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
116
115
114
111
110
108
104
103
102
101
100
99
98
93
94
95
96
97
92
91
90
89
109
112
88
87
113
117
59
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
68
69
105
106
107
173
174
161
162
163
164
165
166
167
168
169
170
171
172
175
186
220
217
216
213
212
221

Example 3: Time taken:
Solution:

competition instances solutions and time taken


Description of Algorithm

Our program finds a tour using a two step process. First, we create a tour using the nearest neighbor algorithm. The nearest neighbor algorithm is a greedy algorithm that always adds the cheapest edge that will continue the tour. It starts at an arbitrary vertex and an empty tour represented by an array of vertices. In our algorithm, it always starts and ends at vertex 0. It checks every edge from the current vertex, takes the least expensive edge that leads to a vertex that is not already in the tour, and adds it to the tour. This repeats until every city has been visited and we have returned to vertex 0. Second, we refine this answer using pairwise comparison. In pairwise comparison, each possible pair of edges is considered and they are switched if doing so will result in a less expensive tour.

Nearest Neighbor Pseudocode

current vertex = 0

for # of vertices do
	for # of edges do
		if the edge is the cheapest edge and the destination vertex is not already in the tour
			current vertex = destination vertex
			add the current vertex to the tour
		endif
	endloop
endloop

Pairwise Comparison Pseudocode
### TODO



Example Instance Solutions

Instance: tsp_example_1.txt
Solution: 
Time Taken: 

Instance: tsp_example_2.txt
Solution: 
Time Taken: 

Instance: tsp_example_3.txt
Solution: 
Time Taken: 


Competition Instance Solutions
Instance: test-input-1.txt
Solution: 
Time Taken: 

Instance: test-input-2.txt
Solution: 
Time Taken: 

Instance: test-input-3.txt
Solution: 
Time Taken: 

Instance: test-input-4.txt
Solution: 
Time Taken: 

Instance: test-input-5.txt
Solution: 
Time Taken: 

Instance: test-input-6.txt
Solution: 
Time Taken: 

Instance: test-input-7.txt
Solution: 
Time Taken: 
